import { Component, OnInit } from '@angular/core';
import { Form, NgForm } from '@angular/forms';
import { DomSanitizer } from '@angular/platform-browser';
import { Router } from '@angular/router';
import { VulnerabilityFound } from 'src/app/common/vulnerability-found';
import { FileHandle } from 'src/app/modals/file-handle';
import { VulnerabilityFoundService } from 'src/app/services/vulnerability-found.service';

@Component({
  selector: 'app-vulnerability-found',
  templateUrl: './vulnerability-found.component.html',
  styleUrls: ['./vulnerability-found.component.css']
})
export class VulnerabilityFoundComponent implements OnInit{
  //need to fix
  m=1;
  copoc:any=[];
//
  tempVul = {};
  //vulnerability!: VulnerabilityFound;
  vulnerability = new VulnerabilityFound(0,0,'','','','','','','',[],[]);
  
  status : string[] = ['Open','Closed']

  ngOnInit(): void {
    this.vulnerability.pocdes.push("hello")
    console.log(this.vulnerability.pocdes[0]);
    this.getVulnerability();
  }

  constructor(private router:Router,private vser:VulnerabilityFoundService, private sanit:DomSanitizer){

  }

  getVulnerability(){
    this.vser.getVulnerability(1).subscribe(data=>{
      this.tempVul=data;
      this.vulnerability = this.tempVul as VulnerabilityFound;
      
    })
  }

  addNewVulnerability(vulForm:NgForm){
    const testFormData = this.prepareFormData(this.vulnerability);
    this.vser.addNewVulnerability(testFormData).subscribe(data=>
      {vulForm.reset();
      this.vulnerability.poc=[];
  });
  }

  prepareFormData(vfound: VulnerabilityFound):FormData{
    const formData = new FormData();
  
    formData.append('vfound',
    new Blob([JSON.stringify(vfound)],{type:'application/json'}));
  
    for(var i = 0;i<vfound.poc.length;i++){
      formData.append(
        'imgfile',
        vfound.poc[i].file,
        vfound.poc[i].file.name,
        //vfound.pocdes[i]
      );
      }
          formData.append('pocdes',
            new Blob([JSON.stringify(vfound.pocdes)],{type:'application/json'}));
    return formData;
  }

  cancelAddVul(){
    console.log("canceled");
  }

///Improvement at later stage
  onFileSelected(event:any){
    //this.vulnerability.pocdes.push(" ");
    if(event.target.files){
      const file = event.target.files[0];
    
      this.m++;
      const fileHandle: FileHandle ={
        file: file,
        url: this.sanit.bypassSecurityTrustUrl(window.URL.createObjectURL(file))
      }
      
      this.vulnerability.poc.push(fileHandle);
      //console.log(this.filteredVul.poc)
    }
  }
  removeImg(i:any){
    this.vulnerability.poc.splice(i,1);
  }


  fileDropped(fileHandle: FileHandle) {
    this.vulnerability.poc.push(fileHandle);
    this.vulnerability.pocdes.push()
  }

}


